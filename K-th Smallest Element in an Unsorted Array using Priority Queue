pproach: The idea is to use PriorityQueue Collection in Java or priority_queue STL library to implement Max_Heap to find the Kth smallest array element. Follow the steps below to solve the problem:


    Implement Max Heap using a priority_queue.
    Push first K array elements into the priority_queue.
    From there on, after every insertion of an array element, pop the element at the top of the priority_queue.
    After complete traversal of the array, print the element at the top of the priority queue as the required answer.

Below is the implementation of the above approach:

// Java program for the above approach
import java.util.*;
class CustomComparator implements Comparator<Integer> {
 
    @Override
    public int compare(Integer number1, Integer number2) {
        int value =  number1.compareTo(number2);
       
        // elements are sorted in reverse order
        if (value > 0) {
            return -1;
        }
        else if (value < 0) {
            return 1;
        }
        else {
            return 0;
        }
    }
}
class GFG{
 
// Function to find kth smallest array element
static void kthSmallest(int []v, int N, int K)
{
    // Implement Max Heap using
    // a Priority Queue
    PriorityQueue<Integer> heap1 = new PriorityQueue<Integer>(new CustomComparator());
 
    for (int i = 0; i < N; ++i) {
 
        // Insert elements into
        // the priority queue
        heap1.add(v[i]);
 
        // If size of the priority
        // queue exceeds k
        if (heap1.size() > K) {
            heap1.remove();
        }
    }
 
    // Print the k-th smallest element
    System.out.print(heap1.peek() +"\n");
}
 
// Driver code
public static void main(String[] args)
{
    // Given array
    int []vec = { 5, 20, 10, 7, 1 };
 
    // Size of array
    int N = vec.length;
 
    // Given K
    int K = 2;
 
    // Function Call
    kthSmallest(vec, N, K % N);
}
}
 
// This code is contributed by Amit Katiyar
Output: 

5

 

Time Complexity: O(N LogK)
Auxiliary Space: O(K), since the priority queue ay any time holds at max k elements.

